akka {  
  actor {  
    provider = cluster  
    ask-timeout = 30s  
    default-dispatcher {  
      fork-join-executor {  
        parallelism-min = 8  
        parallelism-factor = 2.0  
        parallelism-max = 32  
      }  
    }  
  }

  http {  
    server {  
      request-timeout = 30s  
      idle-timeout = 60s  
    }  
  }  

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:8083"
    ]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    sharding {
      passivate-idle-entity-after = off
    }
  } 

  remote {  
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.port = ${akka.remote.artery.canonical.port} # Dynamic port configuration
    }  
  }  

  actor {
    serialization-bindings {
      "me.akashmaj.demomarketplaceservice.Order$Command" = jackson-json
      "me.akashmaj.demomarketplaceservice.Product$Command" = jackson-json
      "me.akashmaj.demomarketplaceservice.Gateway$OrderInfo" = jackson-json
      "me.akashmaj.demomarketplaceservice.Gateway$ProductInfo" = jackson-json
      "me.akashmaj.demomarketplaceservice.Order$OrderItem" = jackson-json
    }
  }

  serialization.jackson {
    enabled = on
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }
  }


  loggers = ["akka.event.slf4j.Slf4jLogger"]  
  loglevel = "INFO"  
}